swagger: "2.0"
info:
  title: blog API, developed by Oscar Andr√©s Russi Porras
  description: this API contains endpoints to CRUD
  version: 1.0.0
basePath: /api
servers:
  - url: http://localhost:3000/api/
tags:
  - name: articles
    description: articles of the blog
  - name: categories
    description: categories of the article, each article can have many categories
  - name: comments
    description: comments made by users on each article
  - name: login
    description: so users can authenticate and get authorization to use the endpoints
  - name: users
    description: register users that can use the endpoints
paths:
  /users:
    post:
      tags:
        - "users"
      summary: "create users that can authenticate to use the endpoints of the API"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: body
          description: "contains the properties of a user"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/users_create"
      responses:
        "Ok":
          description: "Valid params for user model"
          schema:
            $ref: "#/definitions/response_users"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
  /users/{id}:
    put:
      tags:
        - "users"
      summary: "update users, user can only edit itself or it can edit others if it has a super_admin role"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the user to be updated"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
        - in: "body"
          name: body
          description: "contains the properties of a user"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/users_create"
      responses:
        "Accepted":
          description: "Valid params for user model"
          schema:
            $ref: "#/definitions/response_put_users"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
  /users/previous_versions/{id}:
    get:
      tags:
        - "users"
      summary: "only can be used by super_admin or content_manager user's roles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the user to check previous versions"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "Valid params for user model"
          schema:
            $ref: "#/definitions/response_previous_versions_users"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
  /users/{id}/roles/update_many:
    put:
      tags:
        - "users"
      summary: "update roles from requested user. User updatting should have super_admin role"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the user to update its roles"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
        - in: "body"
          name: body
          description: "list of roles to assign to this user"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/users_roles_update"
      responses:
        "Accepted":
          description: "Valid roles, user id and Authorization token"
        "Forbidden":
          description: "Current user is not super_admin, so it is forbidden to do this action"
        "Unauthorized":
          description: "invalid Authorization token"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
  /login:
    post:
      tags:
        - "login"
      summary: "generate an Authentication token to login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: body
          description: "contains the properties of a user"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/login_create"
      responses:
        "Ok":
          description: "Valid params for user model"
          schema:
            $ref: "#/definitions/response_login"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
  /comments/{id}:
    delete:
      tags:
        - "comments"
      summary: "delete comment by id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the comment"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "Valid id comment and valid authorization token"
          schema:
            $ref: "#/definitions/response_destroy_comment"
        "Forbidden":
          description: "Current user is not super admin or content manager, so it is forbidden to do this action"
        "Unauthorized":
          description: "invalid Authorization token"
        "Not Found":
          description: "not comment has the provided id"
          schema:
            $ref: "#/definitions/response_errors"
  /comments/all_deleted:
    get:
      tags:
        - "comments"
      summary: "delete comment by id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "valid authorization token"
          schema:
            $ref: "#/definitions/response_all_deleted_comments"
        "Forbidden":
          description: "Current user is not super admin or content manager, so it is forbidden to do this action"
        "Unauthorized":
          description: "invalid Authorization token"
  /categories:
    get:
      tags:
        - "categories"
      summary: "get all categories"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "valid authorization token"
          schema:
            $ref: "#/definitions/response_get_categories"
        "Unauthorized":
          description: "invalid Authorization token"
  /articles:
    get:
      tags:
        - "articles"
      summary: "get all articles in pending or reviewing state"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "valid authorization token"
          schema:
            $ref: "#/definitions/response_get_articles"
        "Forbidden":
          description: "User doesn't have any of the roles required to use this endpoint"
        "Unauthorized":
          description: "invalid Authorization token"
    post:
      tags:
        - "articles"
      summary: "create a new article"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
        - in: "body"
          name: body
          description: "attributes of the article to be created"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/articles_create"
      responses:
        "Accepted":
          description: "valid authorization token and valid attributes to create article"
          schema:
            $ref: "#/definitions/response_articles_create"
        "Forbidden":
          description: "User doesn't have any of the roles required to use this endpoint"
        "Unauthorized":
          description: "invalid Authorization token"
  /articles/update_aasm/{id}:
    put:
      tags:
        - "articles"
      summary: "update state from an article"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the article"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
        - in: "body"
          name: body
          description: "new article state"
          type: "object"
          required: true
          schema:
            $ref: "#/definitions/articles_update_aasm"
      responses:
        "Accepted":
          description: "valid authorization token"
          schema:
            $ref: "#/definitions/response_articles_create"
        "Forbidden":
          description: "User doesn't have any of the roles required to use this endpoint"
        "Unauthorized":
          description: "invalid Authorization token"
        "Not Found":
          description: "No article with id provided"
  /articles/{id}:
    get:
      tags:
        - "articles"
      summary: "the article by id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the article"
          required: true
          type: "integer"
          example: 1
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Accepted":
          description: "Valid article id and valid Authorization token"
          schema:
            $ref: "#/definitions/response_get_article"
        "unprocessable entity":
          description: "invalid params"
          schema:
            $ref: "#/definitions/response_errors"
        "Forbidden":
          description: "User doesn't have required roles to do this action"
        "Not Found":
          description: "No article with id provided"
        "Unauthorized":
          description: "Invalid authorization token"
  /articles/{id}/comments?page={page}:
    get:
      tags:
        - "articles"
      summary: "get comments of an article by id"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "id"
          description: "ID of the article"
          required: true
          type: "integer"
          example: 1
        - in: "path"
          name: page
          type: "integer"
          description: page from which recover article's comments 
          required: false
        - in: "header"
          name: Authorization
          type: "string"
          description: Authorization token to get authorization to use this endpoint
          required: true
          example: "eyJhbGciOiJIUzI1NiJ9.eyJpZCI6Mn0.hBwXV_xQ2WctBK64_IeJMY0rzqmLIbzZAhS0HuoHtI8"
      responses:
        "Ok":
          description: "Valid article id and valid Authorization token"
          schema:
            $ref: "#/definitions/response_article_comments"
        "Unauthorized":
          description: "Invalid authorization token"
        "Bad Request":
          description: "pagy is out of range"
        "Not Found":
          description: "article not found"
definitions:
  response_errors:
    type: "object"
    show: include errors message
    properties:
      errors:
        type: array
        example:
          - "error message"
  users_create:
    properties:
      email:
        type: "string"
        example: email@email.com
        description: user email
        required: true
      name:
        type: "string"
        example: oscar
        description: user first name
        required: true
      birthday:
        type: "string"
        example: 23/06/1991
        description: user birth date
        required: false
      password:
        type: "string"
        example: "123456"
        description: user password
        required: true
      password_confirmation:
        type: "string"
        example: "123456"
        description: it should be equal to user password
        required: true
  response_users:
    type: "object"
    properties:
      Authorization:
        type: "string"
        example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MTd9.FvSlMW56QXTRRsY_EGx-FFg6RVGt-UI_io-koqZs-OY
        description: Authorization token to add in the headers to authenticate
      user:
        type: object
        properties:
          id:
            type: "integer"
            example: 1
            description: primary key of the created user
          email:
            type: "string"
            example: email@email.com
            description: user email
          name:
            type: "string"
            example: oscar
            description: user name
          birthday:
            type: "string"
            example: 23/06/1991
            description: user birth date
  response_put_users:
    type: object
    properties:
      id:
        type: "integer"
        example: 1
        description: primary key of the created user
      email:
        type: "string"
        example: email@email.com
        description: user email
      name:
        type: "string"
        example: oscar
        description: user name
      birthday:
        type: "string"
        example: 23/06/1991
        description: user birth date
  response_previous_versions_users:
    description: list of previous versions of request user
    type: array
    example:
      - id: 1
        name: oscar
        email: oscar@oscar.com
        birthday: 06/06/1990
      - id: 1
        name: andres
        email: andres@andres.com
        birthday: 06/06/1991
  users_roles_update:
    properties:
      roles:
        description: list of valid roles
        description: list of the next roles to assign the user, remove all other role from this user
        type: array
        example:
        - "super_admin"
        - "content_manager"
  login_create:
    properties:
      email:
        type: "string"
        example: email2@email.com
        description: user email
        required: true
      password:
        type: "string"
        example: "123456"
        description: user password
        required: true
  response_login:
    type: "object"
    properties:
      Authorization:
        type: "string"
        example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MTd9.FvSlMW56QXTRRsY_EGx-FFg6RVGt-UI_io-koqZs-OY
        description: Authorization token to add in the headers to authenticate
  response_destroy_comment:
    type: "object"
    properties:
      id:
        type: "string"
        example: 1
        description: id of deleted comment
  response_all_deleted_comments:
    description: list of deleted comments
    type: array
    example:
      - id: 1
        message: message1
        user_email: email1@email.com
        article_id: 1
      - id: 2
        message: message2
        user_email: email2@email.com
        article_id: 2
  response_get_categories:
    description: list of categories
    type: array
    example:
      - id: 1
        name: name1
        cod: cod1
      - id: 2
        name: name2
        cod: cod2
  response_get_articles:
    description: list of articles
    type: array
    example:
      - id: 1
        title: name1
        content: cod1
        aasm_state: pending
        available_transitions:
          type: array
          example:
            - event: review
              state: reviewing
            - event: reject
              state: rejected
      - id: 2
        title: name2
        content: cod2
        aasm_state: pending
        available_transitions:
          type: array
          example:
            - event: review
              state: reviewing
            - event: reject
              state: rejected
  response_get_article:
    type: "object"
    show: article requested
    properties:
      id:
        type: integer
        description: unique identifier article
        example: 1
      title:
        type: string
        description: article's title
        example: title1
      content:
        type: string
        description: article's content
        example: article1
      aasm_state:
        type: string
        description: article's state, can be either; pending, reviewing, finished or cancelled
        example: pending
      available_transitions:
        type: array
        description: list of possible transitions for current state
        example:
          - event: review
            state: reviewing
          - event: reject
            state: rejected
  articles_create:
    type: "object"
    show: attributes new article
    properties:
      title:
        type: string
        description: article's title
        example: title1
      content:
        type: string
        description: article's content
        example: article1
  response_articles_create:
    type: "object"
    show: response when article is valid
    properties:
      id:
        type: integer
        description: unique identifier article
        example: 1
      title:
        type: string
        description: article's title
        example: title1
      content:
        type: string
        description: article's content
        example: article1
      aasm_state:
        type: string
        description: article's state, can be either; pending, reviewing, finished or cancelled
        example: pending
      available_transitions:
        type: array
        description: list of possible transitions for current state
        example:
          - event: review
            state: reviewing
          - event: reject
            state: rejected
  articles_update_aasm:
    type: "object"
    show: new article event to update state
    properties:
      event:
        type: string
        description: event to update article's state
        example: finish
  response_article_comments:
    description: list of comments from requested article, filter by page (5 comments per page, at most)
    type: array
    example:
      - id: 1
        message: message1
        user_email: email1@email.com
        article_id: 1
      - id: 2
        message: message2
        user_email: email2@email.com
        article_id: 1